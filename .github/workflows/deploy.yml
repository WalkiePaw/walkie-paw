name: CI/CD using github actions & docker

on:
  push:
    branches: [ "Deploy-Test" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Debug
      - name: Debug
        run: echo ${{ github.ref }}

      # gradle build
      - name: Build with Gradle
        run: |
          echo pwd
          pwd
          echo ls
          ls
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # docker build & push to production
#      - name: Docker build & push to prod
#        if: contains(github.ref, 'main')
#        run: |
#          cd mos
#          echo $(ls)
#          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-test-prod .
#          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-prod

      # docker build & push to develop
#      - name: Docker build & push to dev
#        if: contains(github.ref, 'develop')
#        run: |
#          cd mos
#          echo $(ls)
#          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
#          docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-test-dev .
#          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-dev

      # docker build & push
      - name: Docker build & push
        if: contains(github.ref, 'Deploy-Test')
        run: |
          echo $(ls)
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/bitcamp .
          docker push ${{ secrets.DOCKER_USERNAME }}/bitcamp

      # check directory
      - name: check directory
        run: |
          echo pwd
          pwd
          echo ls
          ls
          echo cd
          cd src/main/resources
          echo ls
          ls

      ## deploy to production
      # - name: Deploy to prod
      #   uses: appleboy/ssh-action@master
      #   id: deploy-prod
      #   if: contains(github.ref, 'main')
      #   with:
      #     host: ${{ secrets.HOST_PROD }}
      #     username: ubuntu
      #     key: ${{ secrets.PRIVATE_KEY }}
      #     envs: GITHUB_SHA
      #     script: |
      #       sudo docker ps
      #       sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
      #       sudo docker run -d -p 8082:8082 ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
      #       sudo docker image prune -f

      ## deploy to develop
      - name: Deploy to dev
        uses: appleboy/ssh-action@master
        id: deploy
        if: contains(github.ref, 'Deploy-Test')
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER_NAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            docker ps -aq --filter name=walkiepaw_api | grep -q . && docker rm -f $(docker ps -aq --filter name=walkiepaw_api)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/bitcamp
            sudo docker run -d --name walkiepaw_api -p 8888:8888 -v /home/ubuntu/config:/root/config ${{ secrets.DOCKER_USERNAME }}/bitcamp
            sudo docker image prune -f

      # slack으로 메시지 발송
#      - name: send message to slack
#        uses: 8398a7/action-slack@v3
#        with:
#          status: ${{ job.status }}
#          author_name: zhtmr
#          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
#          mention: here
#          if_mention: failure,cancelled
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required.
#        if: always() # Pick up events even if the job fails or is canceled.
#      run: curl -X POST -H "Content-type:application/json" --data '{"text":"배포 완료!"}' ${{ secrets.SLACK_WEBHOOK_URL }}